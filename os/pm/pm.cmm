/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * pm/pm.cmm : プロセスマネージャ(PM)の本体、プロセスの生成と管理を行う
 *
 * 2016.10.07 : マジックナンバーによってプロセスの実行モードを変更できるように修正（隅田）
 * 2016.01.12 : copyArgs() の argc を廃止
 * 2016.01.02 : sleep システムコールを追加
 * 2015.12.01 : readTextData() を修正
 * 2015.10.01 : exit() のクローズ忘れの確認を変更
 * 2015.11.17 : exec() でプロセスの FDS 領域を確保するように変更
 * 2015.11.16 : copyArgs() に argv 参照配列位置を指すアドレスを追加、null を格納
 * 2015.09.08 : dispatcher.h のインクルード廃止, codeCpy() 廃止(重村)
 * 2015.09.07 : セクタ単位ではなくバイト・ワード単位でファイルから読み出す仕組み
 *              openByte(), getByte(), getWord(), closeByte() を追加
 *              length() 廃止し strlen() を使用するように変更
 *              strncpy() のかわりに strcpy() を使用するように変更(重村)
 * 2015.09.05 : newProc()後、PCBの初期化が完了して schProc() を呼ぶように(重村)
 * 2015.09.03 : receive() が LINK を返すので getLink() の使用を中止(重村)
 * 2015.08.20 : strcopy() を util.cmm に移植、strcpy() を codeCpy() に改称
 * 2015.08.19 : 定数の定義を exeFile.h に移植
 * 2015.06.30 : exec ルーチン内にコマンド行引数の設定を実装
 * 2015.06.04 : ユーザモード時のスタックサイズは EXE ファイルの
 *              ヘッダから取得するように変更
 * 2015.05.27 : IPC のセマフォ使用化による変更
 *              (ランデブ内クライアント PCB 取得、exit ルーチン）
 * 2015.05.22 : exit と wait を修正(すぐに結果を返し、wait ルーチンを繰り返す)
 * 2015.05.08 : システムコールの種類を示す #define を syscall.h に移植
 * 2015.04.30 : wait システムコールを実装
 * 2015.04.27 : exit システムコールを実装
 * 2015.04.24 : プロセス生成の際プロセスのメモリ領域と
 *              PCB 領域の2つに分けてメモリを確保するように変更
 * 2015.04.21 : exec システムコールを実装
 * 2015.03.18 : プロセス毎のスタックをユーザモード用と
 *              カーネルモード用に分けたことによる修正
 * 2015.03.10 : sysExec() からカーネル内の empProcNum() の呼び出しを廃止
 * 2015.02.11 : 村田開発開始
 */

#include <util.h>
#include <kernel.h>
#include <syscall.h>
#include <mm.h>
#include <fs.h>
#include "pm.h"
#include "exeFile.h"

// PM は単一プロセスで実行されるので、ほとんどのグローバル変数アクセスで
// 排他を気にしなくて良い

//-----------------------------------------------------------------------------
// セクタ単位ではなくバイト、ワード単位のread(getByte(), getWord())を提供する
//-----------------------------------------------------------------------------
char[] buf  = array(BLKSIZ);                        // ここにセクタ単位で読込む
int fd      = -1;                                   // FS で使用する FD
boolean eof = true;                                 // EOF に達したか
int bufLen  = 0;                                    // buf 中の有効なバイト数
int bufPtr  = -1;                                   // buf 中のバイト位置

// オープン
int openByte(char[] path) {
   fd = open(path, READ_MODE);                      // FS のシステムコールは
   if (fd<0) return -1;                             //   セクタ単位
   eof = false;
   bufLen = 0;                                      // bufLen を初期化
   bufPtr = -1;                                     // bufPtr を初期化
   return 0;
}

// バイト単位の read
char getByte() {
  if (eof) return '\0';
  bufPtr = bufPtr + 1;
  if (bufPtr>=bufLen) {
    bufLen = read(fd, buf, BLKSIZ);
    if (bufLen<=0) {
      eof = true;
      return '\0';
    }
    bufPtr = 0;
  }
  return buf[bufPtr];
}

// ワード単位の read (EXE ファイル用なのでビッグエンディアンとして処理する)
int getWord() {
  char c1 = getByte();
  char c2 = getByte();
  return (ord(c1)<<8) | ord(c2);                    // ビッグエンディアン
}

// クローズ
void closeByte() {
  eof = true;
  close(fd);
}

//-----------------------------------------------------------------------------
// exec システムコール
//-----------------------------------------------------------------------------
// プロセスを生成する
//   プロセスのメモリ領域の配置は以下の順（二つに分けて確保する）
//     テキスト→ データ→ BSS → ユーザスタック(メモリ空間)
//     PCB → カーネルスタック                  (プロセスデータ)
//   EXE ファイルは FAT ファイルシステムと違い、ビッグエンディアンである

// EXE ファイルのヘッダから読みだしたデータ
int magic;                                          // マジック番号
int textSiz;                                        // TEXT セグメントサイズ
int dataSiz;                                        // DATA セグメントサイズ
int bssSiz;                                         // BSS  セグメントサイズ
int relSiz;                                         // 再配置情報のサイズ
int stkSiz;                                         // ユーザスタックサイズ

// EXE ファイルのヘッダから上記のデータを読み出す
int readHeader() {
  magic       = getWord();                          // マジック番号
  if (magic != USERMAGIC && magic != KERNMAGIC)     // マジック番号が不正
    return EMAGIC;
  textSiz     = getWord();                          // TEXT セグメントサイズ
  dataSiz     = getWord();                          // DATA セグメントサイズ
  bssSiz      = getWord();                          // BSS  セグメントサイズ
  relSiz      = getWord();                          // 再配置情報のサイズ
  stkSiz      = getWord();                          // ユーザスタックサイズ
  if (eof) return ENOEXEC;                          // ファイルが短い
  return 0;                                         // 正常終了
}

// プロセスのメモリ空間に関するデータ
int text;                                           // TEXT セグメントのアドレス
int data;                                           // DATA セグメントのアドレス
int bss;                                            // BSS  セグメントのアドレス
int usp;                                            // ユーザスタックの底
int end;                                            // 空間最後のアドレス

// プロセスのメモリ空間を割り当てる
int allocMem() {
  int procSiz = textSiz+dataSiz+bssSiz+stkSiz;      // メモリ空間サイズ
  text = _AtoI(malloc(procSiz));                    // メモリ空間を確保
  if (text==0) return ENOMEM;                       // malloc できなかった
  data = text + textSiz;                            // DATA セグメントのアドレス
  bss  = data + dataSiz;                            // BSS セグメントのアドレス
  usp  = bss  + bssSiz + stkSiz;                    // ユーザスタックの底(暫定)
  end  = usp;                                       // 空間最後のアドレス
  return 0;                                         // 正常終了
}

// TEXT セグメントと DATA セグメントをメモリに読み込む
int readTextData() {
  for (int addr=text; _uCmp(addr,bss)<0; addr=addr+1) { // TEXT と DATA について
    MEM[addr] = getByte();                          //  ファイルから読んで格納
    if (eof) return ENOEXEC;                        //  ファイルが短い
  }
  return 0;                                         // 正常終了
}

// 再配置を行う
int relocate() {
  int[] TEXT = _ItoA(text);                         // TEXT+DATA を表現する配列
  for (int i=0; i<relSiz; i=i+2) {                  // 再配置情報がある間
    int rel = getWord();                            // ポインタがある場所
    if ((rel&1)!=0) return ENOEXEC;                 // ポインタは偶数アドレス
    if (eof || _uCmp(rel, textSiz+dataSiz)>=0)      // ファイルが短いか
        return ENOEXEC;                             //   場所が範囲外ならエラー
    rel = rel / 2;                                  // ワード位置に変換
    TEXT[rel] = TEXT[rel]+text;                     // ポインタにパッチを当てる
  }
  return 0;                                         // 正常終了
}

// スタックの底に argc, argv, argv[0], ... を格納する
void copyArgs(char[][] argv) {
  // スタックの底に確保する領域のサイズを計算する
  int st = 2 + 2 + 2;                               // argc + argv + null
  int argc = 0;                                     // コマンド行引数の個数
  while (argv!=null && argv[argc]!=null) {          // コマンド行引数について
    st = st + strLen(argv[argc]) + 1 + 2;           //  argv 配列と文字列の領域
    argc = argc + 1;                                //   サイズを合計していく
  }
  usp = usp - ((st+1) & ~1);                        // スタックの終了位置調整

  // スタックの底に確保した領域に argc, argv, ... を書込む
  int[] USP = _ItoA(usp);                           // スタックを表現する配列
  int strAddr  = usp + 2 + 2 + 2*argc + 2;          // 文字列の格納位置

  USP[0] = argc;                                    // argc 格納
  USP[1] = usp + 2 + 2;                             // argv 参照配列の位置

  // argv の格納
  for (int i=0; i<argc; i=i+1) {                    // コマンド行引数回
    USP[i+2] = strAddr;                             //   argv 参照配列位置格納
    strCpy(_ItoA(strAddr), argv[i]);                //   コマンド行引数をコピー
    strAddr = strAddr + strLen(argv[i]) + 1;        //   文字列格納位置を進める
  }
  USP[2+argc] = 0x0000;                             // null 格納
}

// exec システムコールの処理をする
int sysExec(char[] path, char[][] argv, PCB p) {
  int r;                                           // 実行結果
  r = openByte(path);                              // EXE ファイルをオープン
  if(r<0) return ENOEXEC;                          //   見つからなかった
  if ((r=readHeader())!=0 || (r=allocMem())!=0) {  // ヘッダを読みメモリ割付け
    closeByte();                                   //   エラー発生
    return r;
  }

#ifdef DEBUG
printF("********************************\n");
printF("    name=%s\n",path);
printF("    %04x-%04x      procSiz=%d\n",text,end,end-text);
printF("    textBase=%04x  textSiz=%d\n",text,textSiz);
printF("    dataBase=%04x  dataSiz=%d\n",data,dataSiz);
printF("    bssBase =%04x  bssSiz =%d\n",bss,bssSiz);
printF("    stkBase =%04x  stkSiz =%d\n",bss+bssSiz,stkSiz);
printF("                   relSiz =%d\n",relSiz);
printF("********************************\n");
halt();
#endif

  if ((r=readTextData())==0)                       // テキストとデータを読み
    r=relocate();                                  //   再配置する
  closeByte();                                     // ファイルをクローズ

  if (r!=0) {                                      // エラーが発生していれば
    free(_ItoA(text));                             //   メモリを解放する
    return r;
  }

  // BSS セグメントをクリアする
  for(int i=0; i<bssSiz; i=i+1)                    // BSS セグメントに
    MEM[bss+i] = chr(0);                           //   0を格納する

  // コマンド行引数を親プロセスから子プロセスのユーザスタックにコピーする
  copyArgs(argv);

  // PCB を確保・初期化し新しいプロセスを実行可能にする
  int pcbSize = sizeof(PCB)+P_KERN_STKSIZ          // PCB とカーネルスタック
                +P_FILE_MAX*sizeof(int[]);         //   FDの一覧表の領域
  PCB pcb = malloc(pcbSize);                       // PCBを確保
  if (pcb==null) {                                 //   エラー発生
    free(_ItoA(text));
    return ENOMEM;
  }
  int[] fds = _ItoA(_AtoI(pcb)+sizeof(PCB)+P_KERN_STKSIZ);

  if(magic == USERMAGIC)
    newProc(text, p.enice, usp, EI|USER, pcb, fds);  // USERモードとしてPCB 等初期化
  else
    newProc(text, p.enice, usp, EI|KERN, pcb, fds);  // KERNモードとしてPCB 等初期化
  pcb.memBase = _ItoA(text);                         // メモリ空間アドレス
  pcb.memLen  = end - text;                          // メモリ空間サイズ
  pcb.parent  = p;                                   // 親プロセスを設定
  schProc(pcb);                                      // プロセスを実行可能に
  return pcb.pid;                                    // PID を返す
}

//-----------------------------------------------------------------------------
// プロセスマネージャーの本体(ここで各システムコールを実行する)
//-----------------------------------------------------------------------------

int pmSysCall(int op, int prm1, int prm2, int prm3, PCB client) {
  int r = -1;
  if (op==EXEC) {
    r = sysExec(_ItoA(prm1), _ItoA(prm2), client);  // exec(path,argv,parent)
  } else
    r = -1;                                         // どれでもなければエラー
  return r;
}

// プロセスマネージャサーバのメインルーチン
public void pmMain() {
  pmLink = newLink();                               // リンクを生成する
  while (true) {                                    // システムコールを待つ
    Link l = receive(pmLink);                       // システムコールを受信
    int r= pmSysCall(l.op,l.prm1,l.prm2,l.prm3,l.client);// システムコール実行
    send(pmLink, r);                                // 結果を返す
  }
}

//-----------------------------------------------------------------------------
// ユーザプロセスのシステムコール入口
//   以下は、ユーザプロセスのコンテキストで実行されるので、
//   原則 PM のグローバル変数にアクセスしてはならない
//-----------------------------------------------------------------------------

public int exec(char[] path, char[][] argv) {
  int r=sndrec(pmLink,EXEC,_AtoI(path),_AtoI(argv),0);
  return r;                                         // 新しい子の PID を返す
}

public void exit(int status) {
  for (int i=0; i<P_FILE_MAX; i=i+1)                // クローズ忘れがあれば
    if (curProc.fds[i]!=-1) close(i);               //   クローズする

  free(curProc.memBase);                            // メモリ空間を解放
  curProc.exitStat = status;                        // 終了ステータスを格納
  zmbProc();                                        // 自身をゾンビにする
  //panic("exit");  ここは実行されない
}

public int wait(int[] sta) {
  int r = ECHILD;                                   // 一旦、エラー番号を設定
  PCB child = waitChild();                          // 子プロセスの終了を待つ
  if (child!=null) {                                // 子プロセスが終了した
    sta[0] = child.exitStat;                        //   終了ステータスをコピー
    r = child.pid;                                  //   free する前に記録
    free(child);                                    //   PCB 領域を解放する
  }
  return r;                                         // 終了したプロセスの PID
}

// タイマーを起動しブロックする
public int sleep(int ms) {                          // 指定時間(ms)
  if (ms<0) return EINVAL;                          // 負の時間はまずい
  curProc.evtCnt = ms;                              // タイマーを起動し
  if (ms>0) semP(curProc.evtSem);                   // プロセスをブロック
  return 0;
}
