/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * include/syslib.h : lib/syslib.s の外部インタフェース
 *
 * 2016.01.05 : errno を追加
 * 2016.01.02 : sleep システムコールを追加
 * 2015.12.17 : openDir システムコールを削除、readDir() と DIR を lib.cmm に移植
 * 2015.12.01 : APPEND を追加、DIR 構造体のフィールドを変更
 * 2015.11.20 : open システムコールの引数を変更
 * 2015.11.17 : mkDir システムコールと rmDir システムコールを追加
 * 2015.07.17 : 定数を定義
 * 2015.06.03 : malloc() と free() はカーネルプロセス用のため削除
 * 2015.05.12 : 新規作成
 *
 *$Id$
 *
 */

public int errno;                               // エラー番号を格納する変数

// システムコールで用いる定数
#define READ    0
#define WRITE   1
#define APPEND  2
#define BLKSIZ  512

/*----------------------------------------------------------------------------
 *   名前   : exec
 *   戻り値 : int プロセス番号(pid)
 *   引数   : char[] name   生成するプロセスの元になるプログラムの名前
 *          : void [] argv  生成したプロセスに与えるコマンドライン引数
 *   解説   : 引数の EXE プログラムを microSD から探索しプロセスを生成する。
 */
public int exec(char[] name, void[] argv);


/*----------------------------------------------------------------------------
 *   名前   : exit
 *   戻り値 : なし
 *   引数   : int　終了ステータス
 *   解説   : 呼び出しプロセスを終了する。
 */
public void exit(int status);


/*----------------------------------------------------------------------------
 *   名前   : wait
 *   戻り値 : int　子プロセスの PID
 *   引数   : int[]　子プロセスのリターンコードが格納される int 配列
 *                  wait 実行前に呼び出し側で用意して引数として渡す。
 *   解説   : 子プロセスが終了するのを待つ。
 */
public int wait(int[] sta);


/*----------------------------------------------------------------------------
 *   名前   : sleep
 *   戻り値 : int(正常なら0、失敗なら<0)
 *   引数   : int ms  スリープ時間(ms単位)
 *   解説   : 時間を指定してプロセスをスリープさせる。時間の単位は ms である。
 */
public int sleep(int ms);


/*----------------------------------------------------------------------------
 *  名前   : creat
 *　戻り値 : int(正常なら0、失敗なら<0)
 *  引数   : char[] path 作成するファイルのパス
 *  解説   : ファイルを新規作成する
 */
public int creat(char[] path);


/*----------------------------------------------------------------------------
 *  名前   : remove
 *　戻り値 : int(正常なら0、失敗なら<0)
 *  引数   : char[] path 削除するファイルのパス
 *  解説   : ファイルを削除する
 */
public int remove(char[] path);


/*----------------------------------------------------------------------------
 *   名前   : mkDir
 *　 戻り値 : int(正常なら0、失敗なら<0)
 *　 引数   : char[] path　作成するディレクトリのパス
 *   解説   : ディレクトリを作成する
 */
public int mkDir(char[] path);


/*----------------------------------------------------------------------------
 *  名前   : rmDir
 *　戻り値 : int(正常なら0、失敗なら<0)
 *　引数   : char[] path　削除するディレクトリのパス
 *  解説   : ディレクトリを削除する
 */
public int rmDir(char[] path);


/*----------------------------------------------------------------------------
 *   名前   : open
 *   戻り値 : int (ファイル番号(>=0)、-1=エラー)
 *   引数   : char[] path ファイルへのパス
 *            int mode ファイルのオープンモード(READ/WRITE/APPEND)
 *   解説   : ファイルをオープンし、ファイル番号を返す
 */
public int open(char[] path, int mode);


/*----------------------------------------------------------------------------
 *   名前   : close
 *   戻り値 : int (0=正常、-1=エラー)
 *   引数   : int fd オープン済みファイル番号
 *   解説   : ファイル/ディレクトリをクローズする
 */
public int close(int fd);

/*----------------------------------------------------------------------------
 *   名前   : read
 *   戻り値 : int (読み込んだバイト数(>0)、0=EOF、-1=エラー)
 *   引数   : int fd オープン済みファイル番号
 *            void[] buf データを読み込むバッファ
 *            int len バッファサイズ(バイト単位)
 *   解説   : ファイルからデータを読み込む
 *            # 512バイト単位のリードしかサポートしていない
 */
public int read(int fd, void[] buf, int len);

/*----------------------------------------------------------------------------
 *   名前   : write
 *   戻り値 : int (書き込んだバイト数(>=0)、<0=エラー)
 *   引数   : int fd オープン済みファイル番号
 *            void[] buf 書き込むデータ
 *            int len データサイズ(バイト単位)
 *   解説   : ファイルへからデータを書き込む
 */
public int write(int fd, void[] buf, int len);


/*----------------------------------------------------------------------------
 *  名前   : seek
 *　戻り値 : int(正常なら0、失敗なら<0)
 *　引数   : int ptrh　上位絶対バイト位置
 *         : int ptrl  下位絶対バイト位置
 *  解説   : ファイルの参照位置を変更する
 */
public int seek(int fd, int ptrh, int ptrl);

/*----------------------------------------------------------------------------
 *   名前   : conRead
 *   戻り値 : 読み込んだ文字数
 *   引数   : char[] buf 入力された文字列を格納するバッファ
 *            次のようなプログラムで準備しておく
 *              -----------------------------------------------------------
 *              char[] buf = malloc(81);            // 1行の最大入力数は80文字
 *              conRead(buf, 81);
 *              -----------------------------------------------------------
 *          : int len バッファの長さ
 *   解説   : キーボード入力された1行分の文字列(Enter が押されるまで(<80文字))を
 *            取得する
 */
public int conRead(void[] buf, int len);


/*----------------------------------------------------------------------------
 *   名前   : conWrite
 *   戻り値 : 0
 *   引数   : void[] buf  出力したい文字列が格納されたバッファ
 *   解説   : 文字列をディスプレイに出力する
 */
public int conWrite(void[] buf);

public int comTec(int port, int value);

public int putSIO(int c);

public int getSIO();

public int getPS2();