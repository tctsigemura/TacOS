/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011-2019 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * tty/tty.cmm : 端末サーバの本体、キーボード入力の受付とディスプレイ表示をする
 *
 * 2019.10.07 : メソッドの名前を con -> tty と変更
 * 2019.10.02 : conWrite() に長さを指定するように変更
 * 2019.09.26 : conRead() が getSIO() を呼ぶように変更
 * 2019.06.13 : VGA, PS2を削除; conCtl() を追加
 * 2018.11.30 : ps2 を独立させた
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2016.01.03 : 中身を sysConRead() に移動し getBuf() を廃止(重村)
 * 2015.09.08 : strcpy() は util.cmm のものを使うように変更(重村)
 * 2015.09.03 : receive() が LINK を返すので getLink() の使用を中止(重村)
 * 2015.06.05 : ウインドウへの出力を排除
 * 2015.06.04 : 村田開発開始、TTY サーバ化、getLBuf を一部変更
 * 2013.01.08 : TaC-CPU V2 対応
 * 2011.05.20 : 新規作成
 *
 * $Id$
 *
 */

#include <syslib.hmm>
#undef READ
#undef WRITE
#include <util.hmm>
#include <kernel.hmm>
#include <syscall.hmm>

// --------------------------
#include <sio.hmm>
#define getStr(buf, len) getSIO(buf, len)
#define putStr(buf, len) putSIO(buf, len)

#include "tty.hmm"

// セマフォ
int readSem, writeSem;

//----------------------------------------------------------------------------
// システムコールインターフェイス
//   クライアントプロセスが下位のルーチンを呼出す
//----------------------------------------------------------------------------
// ttyRead システムコール
public int ttyRead(char[] buf, int len) {
  if (len<0) return -1;                                 // len<0 ならエラー
  semP(readSem);
  int r = getStr(buf, len);
  semV(readSem);
  return r;
}

// ttyWrite システムコール
public int ttyWrite(char[] buf, int len) {
  if (len<0) return -1;                                 // len<0 ならエラー
  semP(writeSem);
  int r = putStr(buf, len);
  semV(writeSem);
  return r;
}

// ttyCtl システムコール
public int ttyCtl(int request, int mode) {
  if (request==TTYCTL_SETMODE) {
    setSIOCtl(mode);                                    // sio.hmm参照
    return 0;
  } else if (request==TTYCTL_GETMODE) {
    return getSIOCtl();
  }
  return -1;                                            // 未定義の操作
}

public void ttyInit() {
  sioInit();                                            // sioを初期化
  readSem = newSem(1);
  writeSem = newSem(1);
}
