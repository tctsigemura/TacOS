/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2015-2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * shell/shell.cmm : シェルプログラム
 *
 * 2016.03.03 : C--/samples にコピー
 * 2016.01.13 : コマンドプログラムの生成方法を修正
 * 2015.12.07 : コマンドプログラムを bin フォルダから探すように変更
 * 2015.09.01 : コマンド実行後の sta の値のチェックを追加
 * 2015.07.16 : rm コマンドと cp コマンドを実装
 * 2015.07.01 : コマンド行引数の取得を追加
 * 2015.06.17 : 既存の kbdMain をコピー、ユーザプロセスとして動作するように改良
 *
 * $Id$
 *
 */

#include <stdio.hmm>
#include <stdlib.hmm>
#include <string.hmm>
#include <ctype.hmm>
#include <syslib.hmm>
#include <crt0.hmm>

#define LMAX 80                                   // 1行最大 80 文字
#define ARGMAX 30                                 // コマンド業引数は最大30個
#define PATHMAX 80                                // 最長のパスの名
#define BIN  "/bin/"                              // コマンドを探す場所
#define EXE  ".exe"                               // 実行形式の拡張子

char[] cmd = array(PATHMAX+1);                    // 実行形式へのパス
int[]  sta = array(1);                            // リターンコード格納用
char[][] argv = array(ARGMAX+1);                  // コマンド行引数の配列

// 空白以外を探す
int skipSpc(char[] line, int p) {
  while (isSpace(line[p]) && line[p]!='\0')
    p = p + 1;
  return p;
}

// 空白を探す
int srchSpc(char[] line, int p) {
  while (!isSpace(line[p]) && line[p]!='\0')
    p = p + 1;
  return p;
}

// コマンド行を解析して argv 配列を作る
boolean parse(char[] line) {
  int p = 0;
  int i = 0;
  while (i<=ARGMAX) {
    p = skipSpc(line , p);                        // 余計な空白をスキップする
    if (line[p]=='\0') break;                     // 行末になった

    argv[i] = _addrAdd(line, p);                  // 文字列を記録する
    i = i + 1;

    p = srchSpc(line , p);                        // 空白を探す
    if (line[p]=='\0') break;                     // 行末になった

    line[p] = '\0';                               // 文字列を区切る
    p = p + 1;
  }
  if (i>ARGMAX) return true;                      // コマンド行引数が多すぎる

  argv[i] = null;                                 // argv配列を完成する
  return false;                                   // 正常に解析できた
}

public int main() {
  fprintf(stderr, "TacOS Shell\n");

  char[] buf = malloc(LMAX+1);                    // キー入力文字列格納用
  for (;;) {
    fprintf(stderr, "$ ");                        // プロンプトのつもり
    if (fgets(buf, LMAX+1, stdin)==null) break;   // 入力文字列を取得

    // argv を生成
    if (parse(buf)) {
      fprintf(stderr, "shell: Too many args\n");
      continue;
    }

    // デバッグ用
    // for (int i=0; argv[i]!=null; i=i+1)
    //   fprintf(stderr, "argv[%d]=[%s]\n", i, argv[i]);

    if (argv[0]==null) continue;                  // Enter だけなら

    // コマンド名の長さをチェックする
    if (PATHMAX<strLen(BIN)+strLen(argv[0])+strLen(EXE)) {
      fprintf(stderr, "shell: Too long path name\n");
      continue;
    }

    strCpy(cmd, BIN);                             // コマンドへのパスを作る
    strCat(cmd, argv[0]);
    strCat(cmd, EXE);

    sta[0] = 0;                                   // エラー番号をクリア
    if (exec(cmd, argv, null)<0) perror(cmd);     // コマンドを実行
    else if (wait(sta)<0)  perror(cmd);           // コマンドの終了を待つ

    if (sta[0]<0) _perror(argv[0], sta[0]);       // 異常終了のエラー表示
  }

  return 0;
}
