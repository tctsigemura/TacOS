/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2020 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * mp3Files.cmm : MP3ファイルの一覧
 *
 * 2020.09.16 : 新規作成
 *
 * $Id$
 *
 */
#include <fs.hmm>
#include <util.hmm>
#include "appUtil.hmm"
#include "mp3Files.hmm"

//-----------------------------------------------------------------------------
// MP3ファイルの一覧（ただし，最大５個）
//-----------------------------------------------------------------------------
// ５つのファイル名
char[][][] fnames = array(5,20, 13);                     // 12345678.123
int numFile;                                        // ファイルの個数

char[] mp3Dir = "/MP3";
char[] path = array(18);                            // /MP3/12345678.123
char[] none = array(13);

char[] fnameToPath(char[] fname) {
  strCpy(path, mp3Dir);
  strCat(path, "/");
  strCat(path, fname);
  return path;
}

// /MP3 ディレクトリからファイルの一覧を作る（初期化）
public void mp3FilesInit() {
  int fd;                                           // ファイルディスクリプタ
  if ((fd=open(mp3Dir, READ_MODE))<0) {
    panic("panic:can't open MP3 Dir");
  }
  Dir dir;
  int i = 0;
  while (i<20 && (dir=readDir(fd, "MP3"))!=null) {   // 最大5つファイル名を読む
    strCpy(fnames[0][i], dir.name);
    i = i + 1;
  }
  numFile = i;
  close(fd);
}

// n 番目ファイル名を返す（1<=n && n<=5）
public char[] mp3FilesGetName(int m, int n) {
  if (1<=n && n<=numFile) {
    return fnames[m-1][n-1];
  }
  return null;
}

// n 番目パス名を返す（1<=n && n<=5）
public char[] mp3FilesGetPath(int m, int n) {
  if (1<=n && n<=numFile) {
    return fnameToPath(fnames[m-1][n-1]);
  }
  return null;
}

public void playlist_delete(int m, int n){
  for(int i=n; i<20; i=i+1){
    strCpy(fnames[m-1][i-1], fnames[m-1][i]);
  }
  strCpy(fnames[m-1][19], none);
}

public void playlist_add(int m, char[] name){
  for(int i=20; i>1; i=i-1){
    strCpy(fnames[m-1][i-1], fnames[m-1][i-2]);
  }
  strCpy(fnames[m-1][0], name);
}

// 配列の長さを返す
// public int mp3FilesGetLength(){
//   int size = sizeof(fnames)/sizeof(char);
//   return size;
// }
