/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer
 *
 * Copyright (C) 2008-2016 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * util/util.cmm : C-- が動くために必要な関数群
 *
 * 2016.01.11 : panic() が #ifdef DEGUB 以外で printf() を使用しないように変更
 * 2016.01.11 : 一部関数をキャメルケースに統一
 * 2016.01.06 : コメント体裁を清書
 * 2015.01.05 : isUpper, isLower, isDigit, isPrint を削除(util.h のマクロに変更)
 * 2015.12.21 : _uCmp32() を追加
 * 2015.12.14 : strncmp() を dirAccess.cmm に移植
 * 2015.09.07 : strlen(), strcpy() を追加, MEM 配列を復活(重村)
 * 2015.09.04 : panic が標準で PID とリターンアドレスを表示するように変更
 *              getPid() を使用するように変更(重村)
 * 2015.08.20 : toUpper() と strncpy() を移植
 * 2014.05.07 : 村田開発開始、コメントを追加
 * 2013.01.08 : setPri() の引数を記号定数に変更
 * 2013.01.05 : カーネルモードに対応(setPri() の引数)
 * 2012.12.27 : 文字関係のルーチンを追加
 * 2012.12.26 : Ipl の console.cmm をシンボリックリンクして利用する
 * 2012.09.19 : TaC-CPU V2 対応
 * 2011.05.25 : malloc、free を削除(TaC-OS のシステムコールに変更)
 * 2011.05.14 : panic() を追加
 * 2010.07.20 : Subversion による管理を開始
 * 2010.03.12 : public 修飾子を追加
 * 2009.11.05 : バイト配列関係の関数を追加
 * 2009.04.16 : Boot 用に書き換え
 * 2008.08    : Kernel 用初期バージョン
 *
 * $Id$
 *
 */

#include <kernel.h>
#include "util.h"
#include "console.h"

// util の初期化ルーチン
public void utilInit() {
  MEM = _ItoA(0);         // 0x0000 を指す char[] 参照（主記憶を意味する)
  consInit();
}

// 32bit の大小比較(第1引数の方が大きいとき1、等しいとき0、小さいとき-1)
public int _uCmp32(int[] a, int[] b) {
  int t = _uCmp(a[0],b[0]);
  if (t!=0) return t;
  return _uCmp(a[1],b[1]);
}

// --------------------------------- 文字関係 -------------------------------
// toUpper : アルファベット小文字を大文字へ変換
public char toUpper(char c) {
  if (isLower(c)) c = chr(ord(c) - 0x20);
  return c;
}

// --------------------------------- 文字列関係 ------------------------------
// strLen : 文字列の長さを計算する('\0'はカウントしない)
// 返り値 : 文字列の長さ
// 引数 s : 長さを計算する文字列
public int strLen(char[] s) {
  int len = 0;
  while (s[len]!='\0')                              // 終端記号まで
    len = len + 1;
  return len;                                       // 長さを返す
}

// strCpy   : 文字列をコピーする('\0'もコピーする)
// 返り値   : コピーした文字列
// 引数 dst : コピー先文字列
//      src : コピー元文字列
public char[] strCpy(char[] dst, char[] src) {
  int len = 0;
  while (true) {
    dst[len] = src[len];
    if (dst[len]=='\0') break;
    len = len + 1;
  }
  return dst;                                       // コピー先を返す
}

// -------------------------------- 入出力ルーチン --------------------------

// 1文字出力
public void putCh(char c) {			    // VGA と SIO の両方へ出力
#ifdef SIO
  if (c=='\n') putSIO(ord('\r'));
  putSIO(ord(c));
#endif
  putVGA(c);
}

// 文字列出力
public void putStr(char[] str) {
  for (int i=0; str[i]!='\0'; i=i+1)
    putCh(str[i]);
}

#ifdef DEBUG
char[] __hstr = "0123456789abcdef";
int  __putnum_w;
int  __putnum_b;
char __putnum_p;
boolean __putnum_m;

void __putnum_sub(int x, int n) {
  if (x!=0) {
    __putnum_sub(x/__putnum_b, n+1);
    putCh(__hstr[x%__putnum_b]);
  } else {
    if (__putnum_m&&__putnum_p!=' ') putCh('-');
    if (n==0) __putnum_w = __putnum_w - 1;
    while (__putnum_w>n) {
      putCh(__putnum_p);
      __putnum_w = __putnum_w - 1;
    }
    if (__putnum_m&&__putnum_p==' ') putCh('-');
    if (n==0) putCh('0');
  }
}

// グローバル変数を使用するため割り込み禁止(本来なら割り込み禁止する必要はない)
void __uputnum(int x, int w, char p, int base) {
  int r =setPri(DI|KERN);			     // 割り込み禁止
  __putnum_b = base;
  __putnum_m = false;
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);
  setPri(r);					     // 割り込み復元
}

// グローバル変数を使用するため割り込み禁止(本来なら割り込み禁止する必要はない)
void __sputnum(int x, int w, char p, int base) {
  int r =setPri(DI|KERN);			     // 割り込み禁止

  __putnum_b = base;
  __putnum_m = false;
  if (x<0) {
    x = -x;
    __putnum_m = true;
    w = w - 1;
  }
  __putnum_w = w;
  __putnum_p = p;
  __putnum_sub(x,0);

  setPri(r);					     // 割り込み復元
}

public int printF(char[] fmt, ...) {
  int[] args = _args();
  int n = 0;
  int arg = args[0];
  for (int i=0; fmt[i]!='\0'; i=i+1) {
    char c = fmt[i];
    if (c=='%') {
      c = fmt[i=i+1];
      char  p = ' ';
      if (c=='0') p='0';
      int  w = 0;
      while (isDigit(c)) {
        w = w * 10 + (ord(c) - ord('0'));
	c = fmt[i=i+1];
      }
      if (c=='\0') {
        return n;
      } else if (c=='o') {
        __uputnum(arg,w,p,8);
	arg = args[n=n+1];
      } else if (c=='d') {
        __sputnum(arg,w,p,10);
	arg = args[n=n+1];
      } else if (c=='x') {
        __uputnum(arg,w,p,16);
	arg = args[n=n+1];
      } else if (c=='c') {
        putCh(chr(arg));
	arg = args[n=n+1];
      } else if (c=='s') {
        putStr(_ItoA(arg));
	arg = args[n=n+1];
      } else if (c=='%') {
        putCh('%');
      } else {
        putCh(c);
      }
    } else
      putCh(c);
  }
  return n;
}
#endif

// --------------------------- リングバッファ関係 ------------------------

/*
 * SIO 等で使用できる管理ルーチン
 */

public int nextIdx(int idx) {                    // 直後の添字を求める
  int next = idx + 1;
  if (next>=BSIZE) next = 0;
  return next;
}

public int prevIdx(int idx) {                    // 直前の添字を求める
  int next = idx - 1;
  if (next<0) next = BSIZE - 1;
  return next;
}

// リングバッファに 1 文字追加
public boolean putBuf(RingBuf buf, char c) {
  if (!ISFull(buf)) {                     // バッファがパンク！(無視？)
    int next = nextIdx(buf.head);
    buf.buf[buf.head] = c;
    buf.head = next;
    return true;
  }
  return false;
}

// リングバッファから 1 文字取得
public char getBuf(RingBuf buf) {         // リングバッファから1文字取り出し
  if (ISEmpty(buf)) return '0';           //  空の 場合は NULL
  int tail = buf.tail;
  buf.tail = nextIdx(buf.tail);           // tail を進めて
  return  buf.buf[tail];                  // 一文字返す
}

// ------------------------------- エラー表示 ----------------------------
public void panic(char[] msg, ...) {
  setPri(DI|KERN);				    // 割り込み禁止

#ifdef DEBUG
  int[] args = _args();
  printF("### panic(PID=%d(", getPid());
  int[] fp = _addrAdd(args, -6);
  for (int i=0; i<3; i=i+1) {                       // 関数のトレースを3階層
    printF("<-(%04x)",fp[1]);
    fp = _ItoA(fp[0]);
  }
  printF(")) ###\n");
  printF(msg, args[0], args[1], args[2]);

#else
  putStr(msg);
#endif

  putCh('\n');
  while (true) halt();				    // システムを停止する
}
