/*
 * TacOS Source Code
 *    Tokuyama kousen Advanced educational Computer.
 *
 * Copyright (C) 2011 - 2018 by
 *                      Dept. of Computer Science and Electronic Engineering,
 *                      Tokuyama College of Technology, JAPAN
 *
 *   上記著作権者は，Free Software Foundation によって公開されている GNU 一般公
 * 衆利用許諾契約書バージョン２に記述されている条件を満たす場合に限り，本ソース
 * コード(本ソースコードを改変したものを含む．以下同様)を使用・複製・改変・再配
 * 布することを無償で許諾する．
 *
 *   本ソースコードは＊全くの無保証＊で提供されるものである。上記著作権者および
 * 関連機関・個人は本ソースコードに関して，その適用可能性も含めて，いかなる保証
 * も行わない．また，本ソースコードの利用により直接的または間接的に生じたいかな
 * る損害に関しても，その責任を負わない．
 *
 *
 */

/*
 * kernel/process.hmm : プロセス管理に関するデータを含むファイル
 *
 * 2018.01.27 : インクルードファイルの拡張子を .h から .hmm に変更
 * 2017.12.08 : P_SLEEP を P_WAIT に変更
 * 2017.12.05 : Sem構造体からinUseを削除
 * 2016.01.18 : 構造体宣言をアッパーキャメルケースに統一
 * 2015.11.17 : PCB に fds を追加、 P_FILE_MAX を追加
 * 2015.09.06 : tmrCnt,tmrSem,retCode をevtCnt,evtSem,exitStat に改称(重村)
 * 2015.09.04 : LINK にクライアントの PCB を追加
 *              PCB に idx 追加、P_ZOMBIE 追加、curProc 削除(重村)
 * 2015.09.02 : コメントの体裁を整える
 *              タイマーセマフォを PCB から指すように変更(重村)
 * 2015.06.04 : P_USER_STKSIZ を削除(EXE ファイルのヘッダに含まれる値を使用）
 * 2015.05.27 : リンクをセマフォで構成するように変更
 * 2015.04.24 : PCB フィールドをプロセス領域の先頭と終了アドレスから、
 *              領域を指すポインタに変更
 * 2015.04.02 : PCB フィールドに親プロセスへのポインタと、終了ステータスを追加
 * 2015.04.01 : 従来の P_WAIT を P_SLEEP に改称し、P_WAIT と P_ZONBIE を定義
 * 2015.03.18 : プロセスのスタックサイズをユーザモード/カーネルモード用に分離
 * 2015.03.10 : プロセスがオープンしているファイルに関する制御を FS に移植
 * 2015.02.25 : PCB にプロセスのアドレス情報とオープンファイルの情報を追加
 * 2014.05.28 : IPC に使用するリンク構造体を追加
 * 2014.05.02 : 村田開発開始、ファイル名を変更(proc.h -> process.h)
 * 2013.03.05 : コメントなどの手直し
 * 2011.05.20 : 新規作成
 *
 * $Id$
 *
 */

#ifndef _process_h
#define _process_h

// ------------------------------ プロセス関連 --------------------------------
#define PRC_MAX 10        // プロセスは最大 10 個
#define P_KERN_STKSIZ 200 // プロセス毎のカーネルスタックのサイズ
#define P_LOW_PRI 30000   // プロセスの最低優先度
#define P_RUN    1        // プロセスは実行可能または実行中
#define P_WAIT   2        // プロセスは待ち状態
#define P_ZOMBIE 3        // プロセスは実行終了
#define P_MAGIC  0xabcd   // スタックオーバーフロー検知に使用
#define P_FILE_MAX 4      // プロセスがオープンできるファイルの最大数

// プロセスコントロールブロック(PCB)
//   優先度は値が小さいほど優先度が高い
struct PCB {              // PCB を表す構造体
  int sp;                 // コンテキスト(他の CPU レジスタと PSW は
                          //              プロセスのカーネルスタックに置く)
  int pid;                // プロセス番号
  int stat;               // プロセスの状態
  int nice;               // プロセスの本来優先度
  int enice;              // プロセスの実質優先度(将来用)
  int idx;                // この PCB のプロセステーブル上のインデクス

  // プロセスのイベント用セマフォ
  int evtCnt;             // カウンタ(>0:sleep中, ==-1:wait中, ==0:未使用)
  int evtSem;             // イベント用セマフォの番号

  // プロセスのアドレス空間(text, data, bss, ...)
  char[] memBase;         // プロセスのメモリ領域のアドレス
  int memLen;             // プロセスのメモリ領域の長さ

  // プロセスの親子関係の情報
  PCB parent;             // 親プロセスへのポインタ
  int exitStat;           // プロセスの終了ステータス

  // オープン中のファイル一覧
  int[] fds;              // オープン中のファイル一覧

  // シグナルの情報
  int signals;            // 実行中でない時に発生したシグナル
  int sigMask;            // シグナルマスク (0:デフォルト動作, 1:キャッチ)
  int sigHandler;         // シグナルハンドラのアドレス

  // プロセスは重連結環状リストで管理
  PCB prev;               // PCB リスト(前へのポインタ)
  PCB next;               // PCB リスト(次へのポインタ)
  int magic;              // スタックオーバーフローを検知
};

// ------------------------------- セマフォ関連 -------------------------------
#define SEM_MAX 30        // セマフォは最大 30 個

struct Sem {              // セマフォを表す構造体
  int cnt;                // カウンタ
  PCB queue;              // 待ち行列
};

// -------------------------- プロセス間通信(IPC)関連 -------------------------
#define LINK_MAX 5        // リンクは最大 5 個

struct Link {             // リンクを表す構造体
  PCB server;             // リンクを所持するサーバ
  PCB client;             // リンクを使用中のクライアント
  int s1;                 // サーバがメッセージ受信待ちに使用するセマフォ
  int s2;                 // クライアント同士が相互排除に使用するセマフォ
  int s3;                 // クライアントがメッセージ返信待ちに使用するセマフォ
  int op;                 // メッセージの種類
  int prm1;               // メッセージのパラメータ1
  int prm2;               // メッセージのパラメータ2
  int prm3;               // メッセージのパラメータ3
};

#endif
